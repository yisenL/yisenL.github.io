(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{273:function(t,e,r){"use strict";r.r(e);var a=r(13),v=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),e("h2",{attrs:{id:"所有数组方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#所有数组方法"}},[t._v("#")]),t._v(" 所有数组方法")]),t._v(" "),e("h4",{attrs:{id:"添加-删除类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#添加-删除类型"}},[t._v("#")]),t._v(" 添加/删除类型")]),t._v(" "),e("ul",[e("li",[t._v("push() 从结尾处添加元素")]),t._v(" "),e("li",[t._v("pop() 从结尾提取元素/删除数组尾部的元素")]),t._v(" "),e("li",[t._v("shift() 从开头提取元素/删除数组头部的元素")]),t._v(" "),e("li",[t._v("unshift() 从开头添加元素")]),t._v(" "),e("li",[t._v("splice(start,count,e1,e2,e3) 从指定的数组中，删除一部分元素，同时还可以添加另外一部分元素。\n"),e("ul",[e("li",[t._v("start:开始删除和(或)添加元素的位置；count：删除的数量，0表示不删除任何元素，省略表示从开始位置全部删除；e1,e2,e3:新添加的元素；")])])]),t._v(" "),e("li",[t._v("slice(start,end) 用来截取子数组，从指定的数组中，截取几个连续的元素，组成一个新数组")]),t._v(" "),e("li",[t._v("concat(...arr) 拼接两个或多个数组")])]),t._v(" "),e("h4",{attrs:{id:"查询元素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查询元素"}},[t._v("#")]),t._v(" 查询元素")]),t._v(" "),e("ul",[e("li",[t._v("indexOf(searchvalue,fromindex)/lastIndexOf(searchvalue,fromindex) 搜索整个数组中是否有给定的值/返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索。")]),t._v(" "),e("li",[t._v("includes() 判断数组中是否包含一个指定的值")]),t._v(" "),e("li",[t._v("find() 判断数组内是否有符合条件的元素，并返回这个元素")]),t._v(" "),e("li",[t._v("findIndex() 个find()类似，但返回的是索引")]),t._v(" "),e("li",[t._v("filter() 依据指定的函数逻辑判断，并返回原数组的一个元素的子集组成的新数组\n"),e("ul",[e("li",[t._v("filter(function(item){returnitem<n});符合条件(判定为true)的item会被返回；")])])]),t._v(" "),e("li",[t._v("some()方法用于检测数组中的元素是否满足指定条件（空数组则返回false）\n"),e("ul",[e("li",[t._v("some() 方法会依次执行数组的每个元素：\n"),e("ul",[e("li",[t._v("如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。")]),t._v(" "),e("li",[t._v("如果没有满足条件的元素，则返回false。")])])])])]),t._v(" "),e("li",[t._v("every() 检测数值元素的每个元素是否都符合条件。（空数组则返回true）\n"),e("ul",[e("li",[t._v("every() 方法用于检测数组所有元素是否都符合指定条件。")]),t._v(" "),e("li",[t._v("every() 方法使用指定函数检测数组中的所有元素：\n"),e("ul",[e("li",[t._v("如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。")]),t._v(" "),e("li",[t._v("如果所有元素都满足条件，则返回 true。")])])])])])]),t._v(" "),e("h4",{attrs:{id:"转换数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#转换数组"}},[t._v("#")]),t._v(" 转换数组")]),t._v(" "),e("ul",[e("li",[t._v("map(func) 从每个元素调用func的结果创建一个新数组；")]),t._v(" "),e("li",[t._v("sort(func) 将数组中的元素排序，然后返回")]),t._v(" "),e("li",[t._v("reverse() 将一个数组反转，然后返回")]),t._v(" "),e("li",[t._v("join() 将数组的元素值通过指定的字符连接到一起，并组成一个新的字符串")]),t._v(" "),e("li",[t._v("reduce() 对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。(为数组中的每一个元素依次执行callback函数)\n"),e("ul",[e("li",[t._v("callback\n"),e("ul",[e("li",[t._v("Accumulator (acc) 累计器累计回调的返回值; 它是上一次调用回调时返回的累积值")]),t._v(" "),e("li",[t._v("Current Value (cur) (当前值)数组中正在处理的元素")]),t._v(" "),e("li",[t._v("Current Index (idx) (当前索引)数组中正在处理的当前元素的索引")]),t._v(" "),e("li",[t._v("Source Array (src) (源数组)调用reduce()的数组")])])]),t._v(" "),e("li",[t._v("initialValue 作为第一次调用 callback函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素")]),t._v(" "),e("li",[t._v("作用：\n"),e("ul",[e("li",[t._v("累计所有值")]),t._v(" "),e("li",[t._v("二维数组转成一维数组")]),t._v(" "),e("li",[t._v("计算每个数组出现的次数")]),t._v(" "),e("li",[t._v("按属性对对象数组分类")]),t._v(" "),e("li",[t._v("实现去重功能")]),t._v(" "),e("li",[t._v("按顺序运行Promise")]),t._v(" "),e("li",[t._v("实现map的功能")])])])])]),t._v(" "),e("li",[t._v("toString() 将数组的元素值通过逗号连接到一起，并组成一个新的字符串；")])]),t._v(" "),e("h4",{attrs:{id:"other"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#other"}},[t._v("#")]),t._v(" OTHER")]),t._v(" "),e("ul",[e("li",[t._v("forEach() 遍历数组，为每个元素调用指定的函数；")]),t._v(" "),e("li",[t._v("for() 遍历数组")]),t._v(" "),e("li",[t._v("for...of... 遍历数组")]),t._v(" "),e("li",[t._v("for...in... 遍历数组")]),t._v(" "),e("li",[t._v("Array.isArray() 判断一个数据是否是数组格式；")]),t._v(" "),e("li",[t._v("Object.keys(arr) 遍历数组的键(下标)")])]),t._v(" "),e("h3",{attrs:{id:"改变原数组的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#改变原数组的方法"}},[t._v("#")]),t._v(" 改变原数组的方法")]),t._v(" "),e("ul",[e("li",[t._v("splice、reverse、sort、push、pop、unshift、shift")])]),t._v(" "),e("h3",{attrs:{id:"不动原数组-只产生新数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不动原数组-只产生新数组"}},[t._v("#")]),t._v(" 不动原数组，只产生新数组")]),t._v(" "),e("ul",[e("li",[t._v("concat、slice、join、toString、map、filter、reduce、find、")])]),t._v(" "),e("h3",{attrs:{id:"数组去重"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组去重"}},[t._v("#")]),t._v(" 数组去重")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Array.from(new Set([1, 2, 3, 2]))\n")])])]),e("h3",{attrs:{id:"对象数组去重"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象数组去重"}},[t._v("#")]),t._v(" 对象数组去重")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function uniqueFunc(arr, key){\n  const res = new Map();\n  return arr.filter((item) => !res.has(item[key]) && res.set(item[key], 1));\n}\n")])])])])}),[],!1,null,null,null);e.default=v.exports}}]);